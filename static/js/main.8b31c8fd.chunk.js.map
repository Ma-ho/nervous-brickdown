{"version":3,"sources":["components/Point.js","components/Bricks.js","components/Pad.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Point","props","state","this","left","top","style","width","height","background","borderRadius","position","Component","Bricks","backgroundColor","Pad","xLeft","document","addEventListener","event","setState","touches","pageX","margin","className","Game","generateIfCollideX","pointTop","pointLeft","generateIfCollideY","checkIfCollideX","brickWall","filter","item","map","join","checkIfCollideY","MoovingBallX","goRight","xSpeed","setTimeout","MoovingBallY","goDown","ySpeed","getBrickWall","brick","i","j","push","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b31c8fd.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Point extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n        }\n    }\n\n    render(){\n        const style = {\n            width: \"20px\",\n            height: \"20px\",\n            background: `radial-gradient(white, #9198e5)`,\n            borderRadius: \"50%\",\n            position:'absolute'\n        }\n        const {left, top} = this.props\n\n        return(\n            <div style={{...style, left:left, top:top}}/>\n        )\n    }\n\n}\n\nexport default Point","import React, { Component } from 'react';\n\nclass Bricks extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {};\n    }\n\n    render() { \n      const {left, top} = this.props\n      const brickSize = {\n         width:`65px`,\n         height:`10px`,\n         backgroundColor:'Tan',\n         position:'absolute',\n      }  \n      return (\n        <div>\n          <div style={{...brickSize ,top:top, left:left}}></div>\n        </div>\n      );\n    }\n  }\n\n\nexport default Bricks;","import React, { Component } from \"react\";\nimport './Pad.css';\n\nclass Pad extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            xLeft:'',\n        };\n    }\n\n    componentDidMount(){\n        document.addEventListener('touchstart', event => {\n            this.setState({\n                xLeft: event.touches[0].pageX\n            })\n        }, false);\n        document.addEventListener('touchmove', event => {\n            //penser à changer screen width lorsqu'on aura choisi la taille de la fenêtre du jeu \n            //if à revoir ..\n            if ((this.state.xLeft >= 0) && (this.state.xLeft <= 400)) \n            this.setState({\n                xLeft: event.touches[0].pageX\n            })\n        }, false);\n    }\n    \n    render() {\n        return (\n            <div\n            style={{\n                width:\"100%\",\n                height:\"600px\",\n                margin: \"0 auto\",\n                position:\"relative\",\n            }}\n            >\n                <div className=\"TabBarre\"\n                    style={{\n                        left:`${this.state.xLeft}px`\n                    }}\n                >\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\nexport default Pad;","import React, {Component} from 'react';\nimport './Game.css';\nimport Point from './Point';\nimport Bricks from './Bricks';\nimport Pad from './Pad';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      pointLeft: 20,\n      pointTop:587,\n      goRight:true,\n      goDown:false,\n      xSpeed:1,\n      ySpeed:1,\n      brickWall: this.getBrickWall()\n    }\n  }\n\n  generateIfCollideX = (left, top) => {\n    return (this.state.pointTop+19>top && this.state.pointTop<top+9 && this.state.pointLeft+20>left && this.state.pointLeft<left+65)\n  }\n\n  generateIfCollideY = (left, top) => {\n    return (this.state.pointTop+20>top && this.state.pointTop<top+10 && this.state.pointLeft+19>left && this.state.pointLeft<left+64)\n  }\n\n  checkIfCollideX = () => {\n    return (this.state.brickWall\n      .filter( item => {\n        return this.generateIfCollideX(item.left, item.top)===true\n      })\n      .map(item=>{\n        return this.generateIfCollideX(item.left, item.top)\n      }))\n      .join('||')\n  }\n\n  checkIfCollideY = () => {\n    return (this.state.brickWall\n      .filter( item => {\n        return this.generateIfCollideY(item.left, item.top)===true\n      })\n      .map( item => {\n        return this.generateIfCollideY(item.left, item.top)\n      }))\n      .join('||')\n  }\n\n  MoovingBallX = () => {\n    if (this.state.goRight){\n      // eslint-disable-next-line \n        this.setState({pointLeft : this.state.pointLeft+=this.state.xSpeed})\n    } else if (!this.state.goRight){\n      // eslint-disable-next-line \n        this.setState({pointLeft : this.state.pointLeft-=this.state.xSpeed})\n    }\n    \n\n    if (this.state.pointLeft > 355 || this.state.pointLeft < 0 || this.checkIfCollideX()\n      ){\n        this.setState({goRight : !this.state.goRight})\n    }\n\n    setTimeout(this.MoovingBallX, 1)\n  }\n\n  MoovingBallY = () => {\n    if (this.state.goDown){\n      // eslint-disable-next-line \n        this.setState({pointTop : this.state.pointTop+=this.state.ySpeed})\n    } else if (!this.state.goDown){\n      // eslint-disable-next-line \n        this.setState({pointTop : this.state.pointTop-=this.state.ySpeed})\n    }\n    \n\n    if (this.state.pointTop > 587 || this.state.pointTop < 0 || this.checkIfCollideY()\n    ){\n        this.setState({goDown : !this.state.goDown})\n    }\n\n    setTimeout(this.MoovingBallY, 1) \n  }\n\n  getBrickWall = () => {\n    const brick = [];\n        for (let i = 0; i < 6; i++) {     \n            for (let j = 0; j < 5; j++){\n              brick.push ({top:i*20, left:j*75})\n            } \n        }\n    return brick;\n  };\n\n  componentDidMount(){\n    this.MoovingBallX()\n    this.MoovingBallY()\n  }\n\n  render(){\n    const {pointLeft, pointTop} = this.state\n    return (\n      <div className=\"Game\">\n        <div style={{position: 'relative', height:'600px', width:'375', top:'67px'}}>\n          {this.state.brickWall.map( item => {\n            return(\n              <Bricks \n              top={item.top}\n              left={item.left}\n              />\n            ); \n          })}\n        <Point left={pointLeft} top={pointTop}/>\n        <Pad/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport Game from './components/Game';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}